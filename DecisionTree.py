# -*- coding: utf-8 -*-
"""assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1asFDei0k17JTU1yIMXjerTaSJ16o9EpR
"""

from numpy.ma.core import size
import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score
from matplotlib import pyplot as plt
from sklearn import datasets
from sklearn.tree import DecisionTreeClassifier 
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.tree import plot_tree
from statistics import mean
import statistics
import random
# Reading the BankNote_Authentication.csv file
dataset = pd.read_csv('BankNote_Authentication.csv')
#splitting the data into 25% training and 75% testing
feature_names = [c for c in dataset.columns if c not in ['class']]
X = dataset.loc[:,feature_names]
y = dataset.loc[:,'class']
#Rerun this experiment 5 times 
#Report the sizes and accuracies of these trees in each experiment.
accurracy = []
sizee = []
trainingDataAccuracy=[]
testDataAccuracy=[]
Random_state=[]
for x in range(0, 5):
  random_statee = random.randint(100, 500)
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.75,random_state=random_statee)
  clf = DecisionTreeClassifier()  #Creating Decision Tree Classifier
  clf.fit(X_train,y_train)  #fitting
  y_pred = clf.predict(X_test)
  accurracy.append(accuracy_score(y_test,y_pred)) #to get the accuracy
  sizee.append(clf.tree_.node_count) #to get the size
  trainingDataAccuracy.append(accuracy_score(y_true = y_train, y_pred=clf.predict(X_train)))
  testDataAccuracy.append(accuracy_score(y_true = y_test, y_pred=y_pred))
  Random_state.append(random_statee)
print("Random state",Random_state)
print("Train data accuracy:",trainingDataAccuracy)
print("Test data accuracy:",testDataAccuracy)
print("the accuracy is:",accurracy)
print("the size is:",sizee)

ratios = [0.3,0.4,0.5,0.6,0.7] 
counter=0;
for k in ratios:
  accurracy_arr=[]
  sizee_arr=[]
  for i in range(0, 5):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=k,random_state=i)
    clf = DecisionTreeClassifier()  #Creating Decision Tree Classifier
    clf.fit(X_train,y_train)  #fitting
    y_pred = clf.predict(X_test)   
    accurracy_arr.append(accuracy_score(y_test,y_pred))
    sizee_arr.append(clf.tree_.node_count)
    #trainsize=len(X_train)
    #trainingSet.append(trainsize)
    #print("Train data accuracy:",accuracy_score(y_true = y_train, y_pred=clf.predict(X_train)))
    #print("Test data accuracy:",accuracy_score(y_true = y_test, y_pred=y_pred))
    meann = statistics.mean(accurracy_arr) #calculate the mean of the accuracy
    meannSize = statistics.mean(sizee_arr) #calculate the mean of the size
    MaximumAcc=max(accurracy_arr)#calculate the maximum of the accuracy
    MinimumAcc=min(accurracy_arr)#calculate the maximum of the accuracy
    MaximumSize=max(sizee_arr)#calculate the maximum of the size
    MinimumSize=min(sizee_arr)#calculate the maximum of the size    
  print("Training SetSize ratio is:",ratios[counter])
  counter=counter+1
  print("the accuarcy is:", accurracy_arr)
  print("the size is:",sizee_arr)
  print("accuracy  Mean is:", meann)
  print("Maximum accuracy is:", MaximumAcc)
  print("Minimum accuracy is:", MinimumAcc)
  print("tree size Mean is:", meannSize)
  print("Maximum tree size is:", MaximumSize)
  print("Minimum tree size is:", MinimumSize)
  print("_____________________________________________________________________________")
plt.plot(ratios,accurracy_arr)
plt.show()
plt.plot(ratios,sizee_arr)
plt.show()