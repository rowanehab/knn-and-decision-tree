# -*- coding: utf-8 -*-
"""knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1flhYr0LSnzkj6Ae7eG0EYQrScFK8cNHP
"""

import pandas as pd
import numpy as np
import seaborn as sns
import math
import matplotlib.pyplot as plot

data=pd.read_csv('BankNote_Authentication.csv')

df=pd.DataFrame(data)
df =df.sample(frac = 1) # shuffling data
x = df[['variance','skewness','curtosis','entropy']]
y = df['class']
x=np.array(x)
y=np.array(y)
total_rows = df.shape[0]
train_size = int(total_rows*0.7)
xtrain=x[0:train_size]
ytrain=y[0:train_size]
xtest=x[train_size:]
ytest=y[train_size:]
m=len(xtrain)  
for i in range (4):
  meann=np.mean(xtrain[:,i])
  std=np.std(xtrain[:,i])
  xtest[:,i]=xtest[:,i]-meann/std
  xtrain[:,i]=xtrain[:,i]-meann/std

def distance(p1,p2): #calculate distance between a given point and data point
    dist = np.sqrt(np.sum((p1-p2)**2))
    return dist

def get_neighbors(train, test_row, num_neighbors, ytrain):
  dist=list()
  for i in range(len(train)):
    dist.append((distance(test_row, train[i,:]),ytrain[i]))
  dist.sort()  
  final=list()
  for i in range (num_neighbors):
    final.append(dist[i])
  return final

def accuracy_check(pred,actual):
    c = 0
    for i in range(len(actual)):
        if(pred[i]==actual[i]):
            c+=1
    acc = (c/len(actual))*100
    return acc, c

def predict(predicted):
  cOne=0
  cZero=0
  for i in range (len(predicted)):
    if predicted[i]==1:
      cOne=cOne+1
    else:
      cZero=cZero+1
  if cOne==cZero:
    return predicted[0]
  elif cOne>cZero:
    return 1
  else:
    return 0

def makePrediction(train, test, num):
  pred=get_neighbors(train, test, num, ytrain)
  ys=list()
  for i in range(num):
    ys.append((pred[i][1]))
  return predict(ys)

k=[1,2,3,4,5,9]
for j in range (len(k)):
  ypred = [] #xtest
  prediction=[]
  for i in xtest:
      prediction = makePrediction(xtrain, i, k[j])
      ypred.append(prediction)
  print("k value: ", k[j])
  accuracy, n=accuracy_check(ytest,ypred)
  print("Number of correctly classified instances :", n, "Total number of instances :", len(ytest))
  print("Accuracy :",accuracy)